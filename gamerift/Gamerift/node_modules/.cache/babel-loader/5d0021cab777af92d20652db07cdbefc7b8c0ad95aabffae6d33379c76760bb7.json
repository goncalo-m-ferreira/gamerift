{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Downloads\\\\trabalho de iw\\\\trabalho final de IW\\\\gamerift\\\\Gamerift\\\\src\\\\components\\\\Admin.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Admin() {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [editUserId, setEditUserId] = useState(null);\n  const [editedUser, setEditedUser] = useState({\n    id: null,\n    email: '',\n    password: ''\n  });\n  useEffect(() => {\n    // Fetch users from API\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://api.sheety.co/182b17ec2dcc0a8d3be919b2baff9dfc/gamerift/folha1');\n        if (response.ok) {\n          const data = await response.json();\n          setUsers(data.folha1);\n        } else {\n          console.error('Failed to fetch users');\n        }\n      } catch (error) {\n        console.error('Error during fetch:', error.message);\n      }\n    };\n    fetchData();\n  }, []); // Run only once on component mount\n\n  const handleEditUser = userId => {\n    // Set the user ID to be edited and pre-fill the form with existing values\n    const userToEdit = users.find(user => user.id === userId);\n    setEditUserId(userId);\n    setEditedUser(userToEdit);\n  };\n  const handleUpdateUser = async () => {\n    try {\n      // Assume your API supports PUT method for user update\n      const response = await fetch(`https://api.sheety.co/182b17ec2dcc0a8d3be919b2baff9dfc/gamerift/folha1/${editUserId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(editedUser)\n      });\n      if (response.ok) {\n        // Update the local state with the edited user\n        setUsers(prevUsers => prevUsers.map(user => user.id === editUserId ? {\n          ...user,\n          ...editedUser\n        } : user));\n        console.log('User updated successfully');\n        // Clear the edit mode\n        setEditUserId(null);\n        setEditedUser({\n          id: null,\n          email: '',\n          password: ''\n        });\n      } else {\n        console.error('Failed to update user');\n      }\n    } catch (error) {\n      console.error('Error during user update:', error.message);\n    }\n  };\n  const handleCancelEdit = () => {\n    // Clear the edit mode\n    setEditUserId(null);\n    setEditedUser({\n      id: null,\n      email: '',\n      password: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: editUserId === user.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedUser.email,\n            onChange: e => setEditedUser({\n              ...editedUser,\n              email: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedUser.password,\n            onChange: e => setEditedUser({\n              ...editedUser,\n              password: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleUpdateUser,\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCancelEdit,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: `ID: ${user.id}, Email: ${user.email}, Password: ${user.password}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleEditUser(user.id),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(Admin, \"8hYlRIo8SVrre56xODr0J4sNYe0=\");\n_c = Admin;\nexport default Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Admin","_s","users","setUsers","editUserId","setEditUserId","editedUser","setEditedUser","id","email","password","fetchData","response","fetch","ok","data","json","folha1","console","error","message","handleEditUser","userId","userToEdit","find","user","handleUpdateUser","method","headers","body","JSON","stringify","prevUsers","map","log","handleCancelEdit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/USER/Downloads/trabalho de iw/trabalho final de IW/gamerift/Gamerift/src/components/Admin.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Admin() {\r\n  const [users, setUsers] = useState([]);\r\n  const [editUserId, setEditUserId] = useState(null);\r\n  const [editedUser, setEditedUser] = useState({ id: null, email: '', password: '' });\r\n\r\n  useEffect(() => {\r\n    // Fetch users from API\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://api.sheety.co/182b17ec2dcc0a8d3be919b2baff9dfc/gamerift/folha1');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setUsers(data.folha1);\r\n        } else {\r\n          console.error('Failed to fetch users');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error during fetch:', error.message);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Run only once on component mount\r\n\r\n  const handleEditUser = (userId) => {\r\n    // Set the user ID to be edited and pre-fill the form with existing values\r\n    const userToEdit = users.find(user => user.id === userId);\r\n    setEditUserId(userId);\r\n    setEditedUser(userToEdit);\r\n  };\r\n\r\n  const handleUpdateUser = async () => {\r\n    try {\r\n      // Assume your API supports PUT method for user update\r\n      const response = await fetch(`https://api.sheety.co/182b17ec2dcc0a8d3be919b2baff9dfc/gamerift/folha1/${editUserId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(editedUser),\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Update the local state with the edited user\r\n        setUsers((prevUsers) =>\r\n          prevUsers.map((user) => (user.id === editUserId ? { ...user, ...editedUser } : user))\r\n        );\r\n        console.log('User updated successfully');\r\n        // Clear the edit mode\r\n        setEditUserId(null);\r\n        setEditedUser({ id: null, email: '', password: '' });\r\n      } else {\r\n        console.error('Failed to update user');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during user update:', error.message);\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    // Clear the edit mode\r\n    setEditUserId(null);\r\n    setEditedUser({ id: null, email: '', password: '' });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>User Management</h2>\r\n      <ul>\r\n        {users.map((user) => (\r\n          <li key={user.id}>\r\n            {editUserId === user.id ? (\r\n              <>\r\n                <input\r\n                  type=\"text\"\r\n                  value={editedUser.email}\r\n                  onChange={(e) => setEditedUser({ ...editedUser, email: e.target.value })}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={editedUser.password}\r\n                  onChange={(e) => setEditedUser({ ...editedUser, password: e.target.value })}\r\n                />\r\n                <button onClick={handleUpdateUser}>Update</button>\r\n                <button onClick={handleCancelEdit}>Cancel</button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <span>{`ID: ${user.id}, Email: ${user.email}, Password: ${user.password}`}</span>\r\n                <button onClick={() => handleEditUser(user.id)}>Edit</button>\r\n              </>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Admin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}